version: '3'

services:
  redis:
    container_name: redis
    image: redis:alpine
    ports:
    - "6379:6379"
  backend:
    container_name: assict_backend
    build:
      context: backend/assiCT_api_server
    ports:
      - "8000:8000"
    volumes:
      - static:/django_static
    depends_on:
      - redis
  frontend:
    build:
      context: frontend/assict_front
    volumes:
      - build_folder:/frontend/build
  nginx:
    container_name: assict_nginx
    build: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - build_folder:/var/www/frontend
      - ./ssl-certification/data/certbot/conf:/etc/letsencrypt    # nginx컨테이너에 certbot컨테이너 연결
      - ./ssl-certification/data/certbot/www:/var/www/certbot
      - static:/django_static
    depends_on:
      - backend
      - frontend
    command : "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  prometheus:
    container_name: assict_prometheus
    image: prom/prometheus
    user: root
    restart: always
    volumes:
      - ./prometheus:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    command:
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yml'
  grafana:
    build:
      context: grafana
    env_file:
      - grafana/config.grafana
    restart: always
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - 3000:3000
    depends_on:
      - prometheus
  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    restart: always
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    restart: always
    deploy:
      mode: global
  certbot: # certbot 컨테이너 추가
    image: certbot/certbot
    restart: unless-stopped
    container_name: certbot
    volumes:
      - ./ssl-certification/data/certbot/conf:/etc/letsencrypt    # nginx컨테이너에 certbot컨테이너 연결
      - ./ssl-certification/data/certbot/www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    user: root
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
volumes:
  build_folder: null
  prometheus_data: { }
  grafana-storage: { }
  static:
    driver: local